{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\auris\\\\Desktop\\\\Udemy ReLearn\\\\Router_Project\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\";\nimport { useLoaderData } from 'react-router-dom';\nimport EventItem from '../components/EventItem';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  const data = useLoaderData;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_c = EventDetailPage;\nexport default EventDetailPage;\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch details for the event.'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useLoaderData","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","params","id","eventId","response","fetch","ok","Response","JSON","stringify","message","status","$RefreshReg$"],"sources":["C:/Users/auris/Desktop/Udemy ReLearn/Router_Project/12-adv-starting-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom'\r\nimport EventItem from '../components/EventItem'\r\n\r\nfunction EventDetailPage() {\r\n    const data = useLoaderData\r\n\r\n    return (\r\n        <>\r\n        <EventItem event={data.event}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EventDetailPage\r\n\r\nexport async function loader({request, params}) {\r\n    const id = params.eventId\r\n\r\n   const response = await fetch('http://localhost:8080/events/' + id);\r\n   \r\n   if(!response.ok)\r\n {\r\n    throw new Response(JSON.stringify({ message: 'Could not fetch details for the event.' }), { \r\n        status: 500, \r\n      });\r\n } else {\r\n    return response\r\n }\r\n\r\n}"],"mappings":";AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,SAAS,MAAM,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE/C,SAASC,eAAeA,CAAA,EAAG;EACvB,MAAMC,IAAI,GAAGP,aAAa;EAE1B,oBACIG,OAAA,CAAAE,SAAA;IAAAG,QAAA,eACAL,OAAA,CAACF,SAAS;MAACQ,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBAC7B,CAAC;AAEX;AAACC,EAAA,GARQR,eAAe;AAUxB,eAAeA,eAAe;AAE9B,OAAO,eAAeS,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAC5C,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EAE1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAG,CAACE,QAAQ,CAACE,EAAE,EACjB;IACG,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAyC,CAAC,CAAC,EAAE;MACtFC,MAAM,EAAE;IACV,CAAC,CAAC;EACP,CAAC,MAAM;IACJ,OAAOP,QAAQ;EAClB;AAED;AAAC,IAAAN,EAAA;AAAAc,YAAA,CAAAd,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}